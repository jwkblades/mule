#!/usr/bin/perl



use JSON;
use warnings;
use strict;

my @args = @ARGV;
sub findIn($ @);
sub install(@);
sub remove(@);
sub repo(@);
sub update(@);
my %commands = (
	"install" => \&install,
	"remove" => \&remove,
	"repo" => \&repo,
	"update" => \&update
);
sub _main(@){
	my @argv = @_;
	my $cmd = shift(@argv);
	printf("Called _main\n");
	if($commands{$cmd}){
		&{$commands{$cmd}}(@argv);
	}
	else{
	}
}
_main(@args);


sub install(@){
	my @argv = @_;
	printf("Called install\n");
}
sub remove(@){
}
sub repo(@){
	my $dirty = 0;
	my $cmd = shift(@_);
	my $jsonString = "";
	my $jsonRef = 0;
	my @emptyRepoArray = ();
	my %commands = (
		"add" => sub(@){
				foreach my $toAdd (@_){
					if(!(indexOfStr($toAdd, @{$jsonRef})+1)){
						push($jsonRef, $toAdd);
						$dirty = 1;
					}
				}
			},
		"remove" => sub(@){
				foreach my $toRemove (@_){
					my $index = indexOfStr($toRemove, @{$jsonRef});
					if($index + 1){
						splice($jsonRef, $index, 1);
						$dirty = 1;
					}
				}
			},
		"list" => sub(@){
				foreach my $repo (@{$jsonRef}){
					printf("$repo\n");
				}
			},
		"help" => sub(@){
			printf(
"mule repo usage:
  add URL - Add the specified package repository (URL) to the list of repositories
	remove URL - Remove a package repository
	list - List all package repositories currently available\n");  
			}
	);
	
	`touch .mule`;
	open(REPO_LIST, "<.mule");
	while(<REPO_LIST>){
		$jsonString .= $_;
	}
	close(REPO_LIST);
	if(!$jsonString){
		$jsonRef = \@emptyRepoArray;
	}
	else{
		$jsonRef = decode_json($jsonString);
	}

	if(!$cmd){
		help();
	}
	elsif($commands{$cmd}){
		&{$commands{$cmd}}(@_);
	}
	else{
	}

	if($dirty){
		open(REPO_LIST, ">.mule");
		my $jsonString = encode_json($jsonRef);
		printf(REPO_LIST "$jsonString");
		close(REPO_LIST);
	}




}
sub update(@){
}

sub indexOfStr($ @){
	my $needle = shift(@_);
	my @haystack = @_;
	for(my $i = 0; $i < $#haystack + 1; $i++){
		if($needle eq $haystack[$i]){
			return $i;
		}
	}
	return -1;
}
