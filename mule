#!/usr/bin/perl
###############################################################################
# Copyright (c) 2013 James Blades <jwkblades@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software, and 
# that credit be given where credit is due.
# 
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
###############################################################################


use JSON;
use warnings;
use strict;

my @args = @ARGV;
sub findIn($ @);
sub install(@);
sub remove(@);
sub repo(@);
sub update(@);
my %commands = (
	"install" => \&install,
	"remove" => \&remove,
	"repo" => \&repo,
	"update" => \&update
);
sub _main(@){
	my @argv = @_;
	my $cmd = shift(@argv);
	if(!$cmd){
		printf("Please put in a command\n");# FIXME - Should be a help message
		return;
	}
	if($commands{$cmd}){
		&{$commands{$cmd}}(@argv);
	}
	else{
	}
}
_main(@args);


sub install_bag($ $ $){
	my $bag = shift(@_);
	my $repoBag = shift(@_);
	my $jsonRef = shift(@_);

	push($jsonRef->{"bags"},  $repoBag);
	if(!(-d $bag)){
		printf("3: Repo bag found: " . $repoBag->{"name"} . "\n");
		my $bagURL = $repoBag->{"repo"};
		`git clone $bagURL`;
	}
	else{
		`cd $bag; git pull origin master`;
	}
	my $installer = $repoBag->{"installer"};
	`cd $bag; ./$installer`;
}

sub install(@){
	my $jsonString = "";
	my $jsonRef = 0;
	my $dirty = 0;

	`touch .mule`;
	open(REPO_LIST, "<.mule");
	while(<REPO_LIST>){
		$jsonString .= $_;
	}
	close(REPO_LIST);
	if(!$jsonString){
		printf("Empty .mule file, please use 'mule repo add' to add repository mirrors\n");
		return;
	}
	else{
		$jsonRef = decode_json($jsonString);
	}

	foreach my $bag (@_){
		my $found = 0;
		my $repoName;
		my $repoBag;
		foreach $repoName (keys(%{$jsonRef->{"repos"}})){
			my $repoJsonString = "";
			open(REPO_BAGGAGE, "<$repoName/baggage");
			while(<REPO_BAGGAGE>){
				$repoJsonString .= $_;
			}
			close(REPO_BAGGAGE);
			my $repoJsonRef = decode_json($repoJsonString);
			foreach $repoBag (@{$repoJsonRef}){
				if($repoBag->{"name"} eq $bag){
					install_bag($bag, $repoBag, $jsonRef);
					$found = 1;
					last;
				}
			}
			if($found){
				last;
			}

		}
		if($found){
			$dirty = 1;
		}
		else{
			printf("Bag $bag could not be found\n");
		}
	}

	if($dirty){
		my $repoString = encode_json($jsonRef);
		open(REPO_FILE, ">.mule");
		printf(REPO_FILE "$repoString");
		close(REPO_FILE);
	}
}

sub remove(@){
}

sub update(@){
	
	my $cmd = shift(@_);
	my $jsonString = "";
	my $jsonRef = 0;
	my $dirty = 0;

	`touch .mule`;
	open(REPO_LIST, "<.mule");
	while(<REPO_LIST>){
		$jsonString .= $_;
	}
	close(REPO_LIST);
	if(!$jsonString){
		printf("Empty .mule file, please use 'mule repo add' to add repository mirrors\n");
		return;
	}
	else{
		$jsonRef = decode_json($jsonString);
	}

	foreach my $repoName (keys(%{$jsonRef->{"repos"}})){
		if(!(-d $repoName)){
			`git clone $jsonRef->{"repos"}->{$repoName}`;
		}
		else{
			`cd $repoName; git pull origin master`;
		}
	}

	foreach my $bagRef (@{$jsonRef->{"bags"}}){
		my $bagName = $bagRef->{"name"};
		if(!(-d $bagName)){
			next;
		}
		`cd $bagName; git pull origin master`;
		my $bagJsonString = "";

		open(BAG, "<$bagName/$bagName.bag");
		while(<BAG>){
			$bagJsonString .= $_;
		}
		close(BAG);
		
		my $bagJsonRef = decode_json($bagJsonString);
		if($bagRef->{"version"} < $bagJsonRef->{"version"}){
			my $installer = $bagJsonRef->{"installer"};
			`cd $bagName; ./$installer`;
			$bagRef = $bagJsonRef;
			$dirty = 1;
		}
	}

	if($dirty){
		my $repoString = encode_json($jsonRef);
		open(REPO_FILE, ">.mule");
		printf(REPO_FILE "$repoString");
		close(REPO_FILE);
	}
}

sub repo(@){
	my $dirty = 0;
	my $cmd = shift(@_);
	my $jsonString = "";
	my $jsonRef = 0;
	my %reposHash = ();
	my @bagsArray = ();
	my %emptyRepoHash = (
		"repos" => \%reposHash,
		"bags" => \@bagsArray
	);
	my %commands = (
		"add" => sub(@){
				foreach my $toAdd (@_){
					my @matches = $toAdd =~ m/\/([^\/]+)$/;
					my $repoName = $matches[0];
					$repoName =~ s/\.git$//;
					if(!$jsonRef->{"repos"}->{$repoName}){
						$jsonRef->{"repos"}->{$repoName} = $toAdd;
						$dirty = 1;
					}
				}
			},
		"remove" => sub(@){
				foreach my $toRemove (@_){
					if($jsonRef->{"repos"}->{$toRemove}){
						delete $jsonRef->{"repos"}->{$toRemove};
						$dirty = 1;
					}
				}
			},
		"list" => sub(@){
				foreach my $repo (keys(%{$jsonRef->{"repos"}})){
					printf($repo ." ("  . $jsonRef->{"repos"}->{$repo} . ")\n");
				}
			},
		"help" => sub(@){
			printf(
"mule repo usage:
  add URL - Add the specified package repository (URL) to the list of repositories
	remove URL - Remove a package repository
	list - List all package repositories currently available\n");  
			}
	);
	
	`touch .mule`;
	open(REPO_LIST, "<.mule");
	while(<REPO_LIST>){
		$jsonString .= $_;
	}
	close(REPO_LIST);
	if(!$jsonString){
		$jsonRef = \%emptyRepoHash;
	}
	else{
		$jsonRef = decode_json($jsonString);
	}

	if(!$cmd){
		help();
	}
	elsif($commands{$cmd}){
		&{$commands{$cmd}}(@_);
	}
	else{
	}

	if($dirty){
		open(REPO_LIST, ">.mule");
		my $jsonString = encode_json($jsonRef);
		printf(REPO_LIST "$jsonString");
		close(REPO_LIST);
	}
}

sub indexOfStr($ @){
	my $needle = shift(@_);
	my @haystack = @_;
	for(my $i = 0; $i < $#haystack + 1; $i++){
		if($needle eq $haystack[$i]){
			return $i;
		}
	}
	return -1;
}
