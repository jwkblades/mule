#!/usr/bin/perl
###############################################################################
# Copyright (c) 2013 James Blades <jwkblades@gmail.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software, and 
# that credit be given where credit is due.
# 
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
###############################################################################


use JSON;
use warnings;
use strict;

my @args = @ARGV;
sub install($ @);
sub remove($ @);
sub repo($ @);
sub update($ @);
sub help($ @);

my %commands = (
	"install" => \&install,
	"remove" => \&remove,
	"repo" => \&repo,
	"update" => \&update,
	"help" => \&help
);

sub _main(@){
	my @argv = @_;
	my $cmd = shift(@argv);
	if(!$cmd){
		printf("Please put in a command\n");# FIXME - Should be a help message
		return;
	}
	if($commands{$cmd}){

		my $jsonString = "";
		my $jsonRef;
		my %reposHash = ();
		my @bagsArray = ();
		my @explicitlyInstalledArray = ();
		my %emptyRepoHash = (
			"repos" => \%reposHash,
			"bags" => \@bagsArray,
			"explicit" => \@explicitlyInstalledArray
		);

		system("touch .mule");
		open(REPO_LIST, "<.mule");
		while(<REPO_LIST>){
			$jsonString .= $_;
		}
		close(REPO_LIST);
		if(!$jsonString){
			$jsonRef = \%emptyRepoHash;
		}
		else{
			$jsonRef = decode_json($jsonString);
		}
	
		&{$commands{$cmd}}($jsonRef, @argv);
	}
	else{
	}
}
_main(@args);

sub help($ @){
	printf("mule usage: 
	mule install bag [bag2 [...]]
		Install each of the specified bags as well as their dependencies.
	mule remove bag [bag2 [...]]
		Remove each of the specified bags as well as all bags which are dependent on them (Coming soon - also remove all bags on which they are dependent, and are otherwise orphaned).
	mule update
		Download and install all newer version of bags which are available. Update all repo mirrors' baggage files.
	mule repo add mirror [mirror2 [...]]
		Add each of the specified repo mirrors to mule (NOTE - They won't be downloaded until a mule update is called).
	mule repo remove mirrorName [mirrorName2 [...]]
		Remove each of the specified repo mirrors from mule. This doesn't uninstall any packages which were installed from the mirrors.
	mule repo list
		List all repo mirrors mule knows about and their names.
	mule repo help
		Display a help message about the mule repo command.
	mule help
		Display this help message.
	");
}

sub write_out_mule($){
	my $jsonRef = shift(@_);
	open(REPO_LIST, ">.mule");
	my $jsonString = encode_json($jsonRef);
	printf(REPO_LIST "$jsonString");
	close(REPO_LIST);
}

sub present($ $){
	my $depName = shift(@_);
	my $bagsListRef = shift(@_);
	my %emptyHash = ();

	foreach my $bag (@{$bagsListRef}){
		if($bag->{"name"} eq $depName){
			return \%{$bag};
		}
	}
	return \%emptyHash;
}
sub explicit($ $){
	my $depName = shift(@_);
	my $bagsListRef = shift(@_);

	foreach my $bag (@{$bagsListRef}){
		if($bag eq $depName){
			return 1;
		}
	}
	return 0;
}

sub install_deps($ $ $){
	my $depName = shift(@_);
	my $depVersion = shift(@_);
	my $jsonRef = shift(@_);

	my $depRef = present($depName, \@{$jsonRef->{"bags"}});
	if(!%{$depRef}){
		download_and_install($depName, $jsonRef, 0);
	}
}

sub install_bag($ $ $){
	my $bag = shift(@_);
	my $repoBag = shift(@_);
	my $jsonRef = shift(@_);

	if(!%{present($bag, \@{$jsonRef->{"bags"}})}){
		push($jsonRef->{"bags"},  $repoBag);
	}

	if(!(-d $bag)){
		my $bagURL = $repoBag->{"repo"};
		system("git clone $bagURL $bag");
	}
	else{
		system("cd $bag; git pull origin master");
	}
	foreach my $dep (keys(%{$repoBag->{"dependencies"}})){
		my $depVersion = $repoBag->{"dependencies"}->{$dep};
		install_deps($dep, $depVersion, $jsonRef);
	}
	foreach my $dep (keys(%{$repoBag->{"devDependencies"}})){
		my $depVersion = $repoBag->{"devDependencies"}->{$dep};
		install_deps($dep, $depVersion, $jsonRef);
	}

	my $installer = $repoBag->{"installer"};
	system("cd $bag; ./$installer");
}

sub download_and_install($ $ $){
	my $bag = shift(@_);
	my $jsonRef = shift(@_);
	my $explicit = shift(@_);

	foreach my $repoName (keys(%{$jsonRef->{"repos"}})){
		my $repoJsonString = "";

		if(!(-d $repoName)){
			printf("Error - Repo $repoName doesn't exist, have you run a 'mule update'?\n");
			next;
		}

		open(REPO_BAGGAGE, "<$repoName/baggage");
		while(<REPO_BAGGAGE>){
			$repoJsonString .= $_;
		}
		close(REPO_BAGGAGE);

		my $repoJsonRef = decode_json($repoJsonString);
		foreach my $repoBag (@{$repoJsonRef}){
			if($repoBag->{"name"} eq $bag){
				if($explicit){
					push($jsonRef->{"explicit"}, $bag);
				}
				install_bag($bag, $repoBag, $jsonRef);
				return 1;
			}
		}
	}

	printf("Bag $bag could not be found\n");
	return 0;
}

sub install($ @){
	my $jsonRef = shift(@_);
	my $jsonString = "";
	my $dirty = 0;

	foreach my $bag (@_){
		if(%{present($bag, \@{$jsonRef->{"bags"}})} && explicit($bag, \@{$jsonRef->{"explicit"}})){
			next;
		}
		$dirty = $dirty || download_and_install($bag, $jsonRef, 1);
	}

	if($dirty){
		write_out_mule($jsonRef);
	}
}

sub needed($ $){
	my $bagName = shift(@_);
	my $bagsRef = shift(@_);
	my @dependent = ();

	foreach my $bag (@{$bagsRef}){
		my $dep;
		foreach $dep (keys(%{$bag->{"dependencies"}})){
			if($dep eq $bagName){
				push(\@dependent, $bag->{"name"});
			}
		}
		foreach $dep (keys(%{$bag->{"devDependencies"}})){
			if($dep eq $bagName){
				push(\@dependent, $bag->{"name"});
			}
		}
	}
	return \@dependent;
}

sub remove($ @){
	my $jsonRef = shift(@_);
	my $dirty = 0;
	foreach my $bagName (@_){
		printf("Looking to remove $bagName\n");
		my $neededBy = needed($bagName, \@{$jsonRef->{"bags"}});
		printf("$bagName is needed by @{$neededBy}\n");
		if(scalar(@{$neededBy})){
			printf("$bagName is needed by the following bags:\n");
			foreach my $dependingBag (@{$neededBy}){
				printf("    $dependingBag\n");
			}
			printf("Is it alright to remove them as well [y/N]? ");
			$| = 1;
			my $answer = "n";
			$answer = <STDIN>;
			$answer =~ s/^\s*(n|y|Y|N)\s*$/$1/;
			if($answer eq "y" || $answer eq "Y"){
				remove($jsonRef, @{$neededBy});
			}
			else{
				printf("$bagName will not be removed.\n");
				next;
			}
		}

		my $bag = present($bagName, \@{$jsonRef->{"bags"}});
		if(!%{$bag}){
			next;
		}
		my $uninstaller = $bag->{"uninstaller"};
		if(-d $bagName){
			system("cd $bagName; ./$uninstaller");
			system("rm -rf $bagName");
			for(my $i = 0; $i < scalar(@{$jsonRef->{"bags"}}) + 1; $i++){
				if($jsonRef->{"bags"}[$i]->{"name"} eq $bagName){
					splice(\@{$jsonRef->{"bags"}}, $i, 1);
					last;
				}
			}
			for(my $i = 0; $i < scalar(@{$jsonRef->{"explicit"}}) + 1; $i++){
				if($jsonRef->{"explicit"}[$i] eq $bagName){
					splice(\@{$jsonRef->{"explicit"}}, $i, 1);
					last;
				}
			}
			$dirty = 1;
			printf("Removed $bagName\n");
		}
	}

	if($dirty){
		write_out_mule($jsonRef);
	}
}

sub update($ @){
	my $jsonRef = shift(@_);
	my $jsonString = "";
	my $dirty = 0;

	foreach my $repoName (keys(%{$jsonRef->{"repos"}})){
		if(!(-d $repoName)){
			system("git clone " . $jsonRef->{"repos"}->{$repoName} . " $repoName");
		}
		else{
			system("cd $repoName; git pull origin master");
		}
	}

	foreach my $bagRef (@{$jsonRef->{"bags"}}){
		my $bagName = $bagRef->{"name"};
		if(!(-d $bagName)){
			next;
		}
		system("cd $bagName; git pull origin master");
		my $bagJsonString = "";

		open(BAG, "<$bagName/$bagName.bag");
		while(<BAG>){
			$bagJsonString .= $_;
		}
		close(BAG);
		
		my $bagJsonRef = decode_json($bagJsonString);
		my $oldVersion = $bagRef->{"version"};
		my $newVersion = $bagJsonRef->{"version"};
		if($oldVersion < $newVersion){
			my $uninstaller = $bagRef->{"uninstaller"};
			my $installer = $bagJsonRef->{"installer"};
			system("cd $bagName; git checkout $oldVersion; ./$uninstaller; git checkout $newVersion; ./$installer");
			$bagRef = $bagJsonRef;
			$dirty = 1;
		}
	}

	if($dirty){
		write_out_mule($jsonRef);
	}
}

sub repo($ @){
	my $jsonRef = shift(@_);
	my $dirty = 0;
	my $cmd = shift(@_);
	my $jsonString = "";
	my %commands = (
		"add" => sub(@){
				foreach my $toAdd (@_){
					my @matches = $toAdd =~ m/\/([^\/]+)$/;
					my $repoName = $matches[0];
					$repoName =~ s/\.git$//;
					if(!$jsonRef->{"repos"}->{$repoName}){
						$jsonRef->{"repos"}->{$repoName} = $toAdd;
						$dirty = 1;
					}
				}
			},
		"remove" => sub(@){
				foreach my $toRemove (@_){
					if($jsonRef->{"repos"}->{$toRemove}){
						delete $jsonRef->{"repos"}->{$toRemove};
						if(-d $toRemove){
							system("rm -rf $toRemove");
						}
						$dirty = 1;
					}
				}
			},
		"list" => sub(@){
				foreach my $repo (keys(%{$jsonRef->{"repos"}})){
					printf($repo ." ("  . $jsonRef->{"repos"}->{$repo} . ")\n");
				}
			},
		"help" => sub(@){
			printf(
"mule repo usage:
  add URL - Add the specified package repository (URL) to the list of repositories
	remove URL - Remove a package repository
	list - List all package repositories currently available\n");  
			}
	);
	
	if(!$cmd){
		&{$commands{"help"}}();
	}
	elsif($commands{$cmd}){
		&{$commands{$cmd}}(@_);
	}
	else{
	}

	if($dirty){
		write_out_mule($jsonRef);
	}
}
